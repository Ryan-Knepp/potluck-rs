//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "organization")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub pco_id: String,
    pub name: String,
    pub avatar_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attendance::Entity")]
    Attendance,
    #[sea_orm(has_many = "super::household::Entity")]
    Household,
    #[sea_orm(has_many = "super::pairing_history::Entity")]
    PairingHistory,
    #[sea_orm(has_many = "super::potluck::Entity")]
    Potluck,
    #[sea_orm(has_many = "super::potluck_series::Entity")]
    PotluckSeries,
    #[sea_orm(has_many = "super::user::Entity")]
    User,
}

impl Related<super::attendance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attendance.def()
    }
}

impl Related<super::household::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Household.def()
    }
}

impl Related<super::pairing_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PairingHistory.def()
    }
}

impl Related<super::potluck::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Potluck.def()
    }
}

impl Related<super::potluck_series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PotluckSeries.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
