//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use super::sea_orm_active_enums::AttendeeType;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "attendance")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub potluck_id: Uuid,
    pub organization_id: Uuid,
    pub attendee_type: AttendeeType,
    pub attendee_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::OrganizationId",
        to = "super::organization::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organization,
    #[sea_orm(
        belongs_to = "super::potluck::Entity",
        from = "Column::PotluckId",
        to = "super::potluck::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Potluck,
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::potluck::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Potluck.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
