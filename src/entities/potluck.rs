//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "potluck")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub organization_id: i32,
    pub potluck_series_id: i32,
    pub host_person_id: Option<i32>,
    pub host_household_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attendance::Entity")]
    Attendance,
    #[sea_orm(
        belongs_to = "super::household::Entity",
        from = "Column::HostHouseholdId",
        to = "super::household::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Household,
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::OrganizationId",
        to = "super::organization::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organization,
    #[sea_orm(has_many = "super::pairing_history::Entity")]
    PairingHistory,
    #[sea_orm(
        belongs_to = "super::person::Entity",
        from = "Column::HostPersonId",
        to = "super::person::Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    Person,
    #[sea_orm(
        belongs_to = "super::potluck_series::Entity",
        from = "Column::PotluckSeriesId",
        to = "super::potluck_series::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    PotluckSeries,
}

impl Related<super::attendance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attendance.def()
    }
}

impl Related<super::household::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Household.def()
    }
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::pairing_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PairingHistory.def()
    }
}

impl Related<super::person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Person.def()
    }
}

impl Related<super::potluck_series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PotluckSeries.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
