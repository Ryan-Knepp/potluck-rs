//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use crate::OauthClient;
use crate::entities::user::{
    ActiveModel as UserActiveModel, Entity as UserEntity, Model as UserModel,
};
use chrono::Utc;
use oauth2::TokenResponse;
use sea_orm::entity::prelude::*;
use sea_orm::{DatabaseConnection, EntityTrait, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub person_id: Uuid,
    pub organization_id: Uuid,
    pub access_token: String,
    pub refresh_token: Option<String>,
    pub token_expires_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organization::Entity",
        from = "Column::OrganizationId",
        to = "super::organization::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Organization,
    #[sea_orm(
        belongs_to = "super::person::Entity",
        from = "Column::PersonId",
        to = "super::person::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Person,
}

impl Related<super::organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organization.def()
    }
}

impl Related<super::person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Person.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[allow(dead_code)]
pub async fn ensure_valid_access_token(
    user: &mut UserModel,
    db: &DatabaseConnection,
    oauth_client: &OauthClient,
) -> Result<(), anyhow::Error> {
    if user.token_expires_at < Utc::now().naive_utc() {
        let refresh_token = user
            .refresh_token
            .clone()
            .ok_or_else(|| anyhow::anyhow!("No refresh token"))?;
        let token_result = oauth_client
            .exchange_refresh_token(&oauth2::RefreshToken::new(refresh_token))
            .request_async(&reqwest::Client::new())
            .await?;

        user.access_token = token_result.access_token().secret().to_string();
        user.refresh_token = token_result.refresh_token().map(|t| t.secret().to_string());
        user.token_expires_at = Utc::now().naive_utc()
            + chrono::Duration::from_std(token_result.expires_in().unwrap()).unwrap();

        // Save updated user to DB
        let mut active_model: UserActiveModel = user.clone().into();
        active_model.access_token = Set(user.access_token.clone());
        active_model.refresh_token = Set(user.refresh_token.clone());
        active_model.token_expires_at = Set(user.token_expires_at);
        UserEntity::update(active_model).exec(db).await?;
    }
    Ok(())
}
